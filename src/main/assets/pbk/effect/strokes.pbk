<languageVersion : 1.0;>

kernel Strokes
<   namespace : "ar.shader";
    vendor : "Alan Ross";
    version : 1;
    description : "Strokes";
>
{
    parameter float n0
    <
        minValue: 0.0;
        maxValue: 50.0; 
        defaultValue: 36.0;
    >;
    parameter float n1
    <
        minValue: 0.0;
        maxValue: 5.0; 
        defaultValue: 1.85;
    >;
    parameter float n2
    <
        minValue: 0.0;
        maxValue: 1.0; 
        defaultValue: 0.53;
    >;
    parameter float n3
    <
        minValue: 0.0;
        maxValue: 10.0; 
        defaultValue: 2.0;
    >;
    parameter float n4 
     < 
      minValue: 0.0; 
      maxValue: 1.0; 
      defaultValue: 0.97;
     >;
     
    input image4 src;
    output pixel4 dst;

     
    void evaluatePixel()
    {
        float2 pos = outCoord();
        float2 offset;
        float dist;
        float4 c, threshold, p0, p1;
        
        float4 w = float4( 1.0, 1.0, 1.0,1.0 );
        float4 b = float4( 0.0, 0.0, 0.0,1.0 );
        
        float noise = mod(pos.x + pos.y, 192.5);
        noise = ( mod( pos.y * n0 * n1, n2 ) + mod( noise / n1, 3.0 ) + mod( noise, n1 ) ) / 2.0;
        noise = ( mod( noise, 10.0) + mod( noise * n1, n2 ) + mod( noise * pos.x, n2 ) ) / n3;
        
        c = b;
        threshold = float4( n4, n4, n4, 1.0 );
        
        dist = n1 * 1.0;
        offset.x = 0.0; offset.y = 0.0;
        p0 = sampleNearest( src, pos + offset );
        
        float mid = ( p0.r + p0.g + p0.b ) / 3.0;
        
        if( mod(n0,noise) < mid ){ c = w; }
        else{ c = b; }
        
        dst = c;
    }
}